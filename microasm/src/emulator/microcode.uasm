input {
    opsize: 16;
    phase: 4;
}

include "types"
# TODO: parse type syntax
#type Reg enum {
#    A; B; C; D; E; AR; SP; IP;
#}

#type u9 number(9) '#';
#type addr9 number(9) '$';

#bitgroup RegToAddress(Reg reg) {
#    $(reg)ToAddress;
#}
#bitgroup AddressToReg(Reg reg) {
#    AddressTo$(reg)
#}

header {
    IPToAddress, memReadToInst, iRegSet
}

opcode 1 nop() {}

opcode 2 jmp(Reg reg) {
    IPToAddress, memReadToInst, iRegSet;
    1: AToAddress, AddressToIP;
    0: BToAddress, AddressToIP;
}

opcode 3 halt() {
    halt
}
